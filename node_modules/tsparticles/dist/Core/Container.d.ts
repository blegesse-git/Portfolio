import { Canvas } from "tsparticles/dist/Core/Canvas";
import type { IRepulse } from "tsparticles/dist/Core/Interfaces/IRepulse";
import type { IBubble } from "tsparticles/dist/Core/Interfaces/IBubble";
import type { IContainerInteractivity } from "tsparticles/dist/Core/Interfaces/IContainerInteractivity";
import { Particles } from "tsparticles/dist/Core/Particles";
import { Retina } from "tsparticles/dist/Core/Retina";
import type { IOptions } from "tsparticles/dist/Options/Interfaces/IOptions";
import { FrameManager } from "tsparticles/dist/Core/FrameManager";
import type { RecursivePartial } from "tsparticles/dist/Types";
import { Options } from "tsparticles/dist/Options/Classes/Options";
import type { IContainerPlugin } from "tsparticles/dist/Core/Interfaces/IContainerPlugin";
import type { IShapeDrawer } from "tsparticles/dist/Core/Interfaces/IShapeDrawer";
import { Particle } from "tsparticles/dist/Core/Particle";
import type { INoiseValue } from "tsparticles/dist/Core/Interfaces/INoiseValue";
import type { INoise } from "tsparticles/dist/Core/Interfaces/INoise";
import type { IAttract } from "tsparticles/dist/Core/Interfaces/IAttract";
export declare class Container {
    readonly id: string;
    readonly sourceOptions?: RecursivePartial<IOptions> | undefined;
    started: boolean;
    destroyed: boolean;
    density: number;
    pageHidden: boolean;
    lastFrameTime: number;
    fpsLimit: number;
    interactivity: IContainerInteractivity;
    bubble: IBubble;
    repulse: IRepulse;
    attract: IAttract;
    readonly options: Options;
    readonly retina: Retina;
    readonly canvas: Canvas;
    readonly particles: Particles;
    readonly drawer: FrameManager;
    readonly drawers: Map<string, IShapeDrawer>;
    readonly plugins: Map<string, IContainerPlugin>;
    readonly noise: INoise;
    private paused;
    private firstStart;
    private drawAnimationFrame?;
    private readonly eventListeners;
    private readonly intersectionObserver?;
    constructor(id: string, sourceOptions?: RecursivePartial<IOptions> | undefined, ...presets: string[]);
    play(force?: boolean): void;
    pause(): void;
    draw(): void;
    getAnimationStatus(): boolean;
    setNoise(noiseOrGenerator?: INoise | ((particle: Particle) => INoiseValue), init?: () => void, update?: () => void): void;
    destroy(): void;
    exportImg(callback: BlobCallback): void;
    exportImage(callback: BlobCallback, type?: string, quality?: number): void;
    exportConfiguration(): string;
    refresh(): Promise<void>;
    stop(): void;
    loadTheme(name?: string): Promise<void>;
    start(): Promise<void>;
    private init;
    private intersectionManager;
}
