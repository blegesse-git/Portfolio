import type { Container } from "tsparticles/dist/Core/Container";
import type { IDimension } from "tsparticles/dist/Core/Interfaces/IDimension";
import type { IRgb } from "tsparticles/dist/Core/Interfaces/Colors";
import type { ICoordinates } from "tsparticles/dist/Core/Interfaces/ICoordinates";
import type { IParticle } from "tsparticles/dist/Core/Interfaces/IParticle";
import type { IContainerPlugin } from "tsparticles/dist/Core/Interfaces/IContainerPlugin";
import type { ILink } from "tsparticles/dist/Core/Interfaces/ILink";
import type { Particle } from "tsparticles/dist/Core/Particle";
import type { IDelta } from "tsparticles/dist/Core/Interfaces/IDelta";
export declare class Canvas {
    private readonly container;
    element?: HTMLCanvasElement;
    readonly size: IDimension;
    private context;
    private generatedCanvas;
    private coverColor?;
    private trailFillColor?;
    private originalStyle?;
    constructor(container: Container);
    init(): void;
    loadCanvas(canvas: HTMLCanvasElement, generatedCanvas?: boolean): void;
    destroy(): void;
    resize(): void;
    paint(): void;
    clear(): void;
    windowResize(): void;
    initSize(): void;
    drawConnectLine(p1: IParticle, p2: IParticle): void;
    drawGrabLine(particle: IParticle, lineColor: IRgb, opacity: number, mousePos: ICoordinates): void;
    drawParticleShadow(particle: Particle, mousePos: ICoordinates): void;
    drawLinkTriangle(p1: IParticle, link1: ILink, link2: ILink): void;
    drawLinkLine(p1: IParticle, link: ILink): void;
    drawParticle(particle: Particle, delta: IDelta): void;
    drawParticleLinks(particle: Particle): void;
    drawPlugin(plugin: IContainerPlugin, delta: IDelta): void;
    drawLight(mousePos: ICoordinates): void;
    private paintBase;
    private lineStyle;
    private initBackground;
}
