import type { Container } from "tsparticles/dist/Core/Container";
import type { ICoordinates } from "tsparticles/dist/Core/Interfaces/ICoordinates";
import type { IMouseData } from "tsparticles/dist/Core/Interfaces/IMouseData";
import type { IRgb } from "tsparticles/dist/Core/Interfaces/Colors";
import { Particle } from "tsparticles/dist/Core/Particle";
import { QuadTree } from "tsparticles/dist/Utils";
import type { RecursivePartial } from "tsparticles/dist/Types";
import type { IParticles } from "tsparticles/dist/Options/Interfaces/Particles/IParticles";
import type { IDelta } from "tsparticles/dist/Core/Interfaces/IDelta";
import type { IParticle } from "tsparticles/dist/Core/Interfaces/IParticle";
export declare class Particles {
    private readonly container;
    get count(): number;
    quadTree: QuadTree;
    linksColors: Map<string, string | IRgb | undefined>;
    limit: number;
    array: Particle[];
    pushing?: boolean;
    linksColor?: IRgb | string;
    grabLineColor?: IRgb | string;
    private interactionManager;
    private nextId;
    private linksFreq;
    private trianglesFreq;
    constructor(container: Container);
    init(): void;
    redraw(): void;
    removeAt(index: number, quantity?: number): void;
    remove(particle: Particle): void;
    update(delta: IDelta): void;
    draw(delta: IDelta): void;
    clear(): void;
    push(nb: number, mouse?: IMouseData, overrideOptions?: RecursivePartial<IParticles>): void;
    addParticle(position?: ICoordinates, overrideOptions?: RecursivePartial<IParticles>): Particle | undefined;
    removeQuantity(quantity: number): void;
    getLinkFrequency(p1: IParticle, p2: IParticle): number;
    getTriangleFrequency(p1: IParticle, p2: IParticle, p3: IParticle): number;
    setDensity(): void;
    private applyDensity;
    private initDensityFactor;
}
