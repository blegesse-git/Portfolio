import type { IEmitter } from "tsparticles/dist/Plugins/Emitters/Options/Interfaces/IEmitter";
import type { RecursivePartial } from "tsparticles/dist/Types";
import type { ICoordinates } from "tsparticles/dist/Core/Interfaces/ICoordinates";
import { MoveDirection, MoveDirectionAlt } from "tsparticles/dist/Enums";
import type { IParticles } from "tsparticles/dist/Options/Interfaces/Particles/IParticles";
import { EmitterRate } from "tsparticles/dist/Plugins/Emitters/Options/Classes/EmitterRate";
import { EmitterLife } from "tsparticles/dist/Plugins/Emitters/Options/Classes/EmitterLife";
import { EmitterSize } from "tsparticles/dist/Plugins/Emitters/Options/Classes/EmitterSize";
import type { IOptionLoader } from "tsparticles/dist/Options/Interfaces/IOptionLoader";
export declare class Emitter implements IEmitter, IOptionLoader<IEmitter> {
    size?: EmitterSize;
    direction: MoveDirection | keyof typeof MoveDirection | MoveDirectionAlt;
    life: EmitterLife;
    particles?: RecursivePartial<IParticles>;
    position?: RecursivePartial<ICoordinates>;
    rate: EmitterRate;
    constructor();
    load(data?: RecursivePartial<IEmitter>): void;
}
