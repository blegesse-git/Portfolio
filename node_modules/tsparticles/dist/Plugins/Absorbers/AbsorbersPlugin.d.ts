import type { IPlugin } from "tsparticles/dist/Core/Interfaces/IPlugin";
import type { Container } from "tsparticles/dist/Core/Container";
import { Absorbers } from "tsparticles/dist/Plugins/Absorbers/Absorbers";
import type { RecursivePartial } from "tsparticles/dist/Types";
import type { IAbsorberOptions } from "tsparticles/dist/Plugins/Absorbers/Options/Interfaces/IAbsorberOptions";
import type { IOptions } from "tsparticles/dist/Options/Interfaces/IOptions";
import { Options } from "tsparticles/dist/Options/Classes/Options";
declare class AbsorbersPlugin implements IPlugin {
    readonly id: string;
    constructor();
    getPlugin(container: Container): Absorbers;
    needsPlugin(options?: RecursivePartial<IOptions & IAbsorberOptions>): boolean;
    loadOptions(options: Options, source?: RecursivePartial<IOptions & IAbsorberOptions>): void;
}
declare const plugin: AbsorbersPlugin;
export type { IAbsorberOptions };
export { plugin as AbsorbersPlugin };
export * from "tsparticles/dist/Plugins/Absorbers/Enums";
